# context functions

# open more than one window, confirm last one can't be closed
mozAttrUrl = "https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes"
openUrl(mozAttrUrl)
allWins = getAllWinIds()
assertTrue(size(allWins) == 1)
close() # shouldn't close the lone window
allWins = getAllWinIds()
assertTrue(size(allWins) == 1)
dragEventUrl = "https://developer.mozilla.org/en-US/docs/Web/API/Document/drag_event"
openUrlNewWin(dragEventUrl)
allWins = getAllWinIds()
assertTrue(size(allWins) == 2)
close() # should close now
allWins = getAllWinIds()
assertTrue(size(allWins) == 1) # only one win is now remaining
# we need to now switch webdriver to the other window remaining, browser will auto focus the other
# window but webdriver don't know this, it thinks that current window is closed.
switchWin(allWins[0])
assertTrue(getCurrentUrl() == mozAttrUrl) # and that is the first one opened

# open url, keep it's winId, open another win and new url. now switch to the previous win using
# saved winId
mozAttrWin = getCurrentWinId() # current win already has mozAttrUrl
openUrlNewWin(dragEventUrl)
assertTrue(getCurrentUrl() == dragEventUrl)
switchWin(mozAttrWin)
assertTrue(getCurrentUrl() == mozAttrUrl)
close() # closes mozAttrWin, dragEventUrl win remains, switch to. Switching after close is important
# to do any operation so that webdriver knows there is a current context
switchWin(getAllWinIds()[0]) # switch to dragEventUrl win

# new window only
newWin("window")
openUrl(mozAttrUrl)
allWins = getAllWinIds()
assertTrue(size(allWins) == 2)
assertTrue(getCurrentUrl() == mozAttrUrl)
close() # closes mozAttrUrl win, dragEventUrl win remains
switchWin(getAllWinIds()[0]) # switch to dragEventUrl win

# switch frame using index, switch back and forth to test switchParentFrame and switchWin without
# parameters that switches to default content.
openUrl("https://jsfiddle.net/praveen4463/w0eg4azx/")
untilSwitchedToFrame(0) # when not using frame selector, 'until' is needed.
button = findElement("input")
assertTrue(isValidElemId(button))
# parent frame
switchParentFrame()
panelHs = findElements(".panel-h")
assertTrue(size(panelHs) > 1)
switchFrame(0)
button = findElement("input")
assertTrue(isValidElemId(button))
switchWin()
panelHs = findElements(".panel-h")
assertTrue(size(panelHs) > 1)
/* Use when own page are in use not fiddle.
wrapper = findElements(".wrapper")
assertTrue(size(container) > 1)
switchFrame(0)
button = findElement("input")
assertTrue(isValidElemId(button))
switchWin()
wrapper = findElements(".wrapper")
assertTrue(size(container) > 1)
*/

# resizing
originalWinSize = getWinSize()
originalWinPosition = getWinPosition()

setWinPosition(300, 600)
m = getWinPosition()
assertTrue(m.x == 300 && m.y == 600)
setWinPosition(originalWinPosition.x, originalWinPosition.y)
m = getWinPosition()
assertTrue(m.x == originalWinPosition.x && m.y == originalWinPosition.y)

setWinSize(500, 500)
m = getWinSize()
assertTrue(m.width == 500 && m.height == 500)
setWinSize(originalWinSize.width, originalWinSize.height)
m = getWinSize()
assertTrue(m.width == originalWinSize.width && m.height == originalWinSize.height)

setWinPosition(100, 200)
moveWinBy(200, 400)
m = getWinPosition()
assertTrue(m.x == 300 && m.y == 600)
setWinPosition(originalWinPosition.x, originalWinPosition.y)

setWinSize(500, 500)
resizeWinBy(100, 100)
m = getWinSize()
assertTrue(m.width == 600 && m.height == 600)

maximizeWin()
m = getWinSize()
assertTrue(m.width == originalWinSize.width && m.height == originalWinSize.height)
fullScreenWin()
m = getWinSize()
assertTrue(m.width == originalWinSize.width && m.height > originalWinSize.height)